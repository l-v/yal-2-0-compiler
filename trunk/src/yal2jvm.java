/* Generated By:JJTree&JavaCC: Do not edit this line. yal2jvm.java */
import java.util.*;

// código Java que invoca o parser
  public class yal2jvm/*@bgen(jjtree)*/implements yal2jvmTreeConstants, yal2jvmConstants {/*@bgen(jjtree)*/
  protected static JJTyal2jvmState jjtree = new JJTyal2jvmState();
        //public static SymbolTable ST = new SymbolTable();

        public static void main(String args[]) throws ParseException {




          // criação do objecto utilizando o constructor com argumento para
          // ler do standard input (teclado)
          yal2jvm newParser = new yal2jvm(System.in);
          // newParser.Module();

        // symbol table
        //ST = new SymbolTable();


        SimpleNode root = newParser.parserBegin(); //devolve referência para o nó raiz da árvore
        SymbolTable ST = new SymbolTable(root);
        root.dump("");

        ST.printTable();


        // print symbol table
        /*
    Iterator t = ST.keySet().iterator();


     while ( t.hasNext() == true ) {

          temp = (String)t.next();
          temp2 = (STC)ST.get(temp);
          System.out.println(temp);
          if ( temp2.type != null )
            System.out.println(" type = " + temp2.type);
          if ( temp2.value != null )
            System.out.println(" value = " + temp2.value);

    }*/

        }

  static final public SimpleNode parserBegin() throws ParseException {
                            /*@bgen(jjtree) parserBegin */
  SimpleNode jjtn000 = new SimpleNode(JJTPARSERBEGIN);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      Module();
               jjtree.closeNodeScope(jjtn000, true);
               jjtc000 = false;
              {if (true) return jjtn000;}
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
    throw new Error("Missing return statement in function");
  }

  static final public void Module() throws ParseException {
                       Token t0;
    jj_consume_token(MODULE);
    t0 = jj_consume_token(ID);
                     SimpleNode jjtn001 = new SimpleNode(JJTMID);
                     boolean jjtc001 = true;
                     jjtree.openNodeScope(jjtn001);
    try {
                     jjtree.closeNodeScope(jjtn001, true);
                     jjtc001 = false;
                    jjtn001.val = t0.image;
    } finally {
                     if (jjtc001) {
                       jjtree.closeNodeScope(jjtn001, true);
                     }
    }
    jj_consume_token(LCHAVETA);
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ID:
        ;
        break;
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
     SimpleNode jjtn002 = new SimpleNode(JJTDECL);
     boolean jjtc002 = true;
     jjtree.openNodeScope(jjtn002);
      try {
        Declaration();
      } catch (Throwable jjte002) {
     if (jjtc002) {
       jjtree.clearNodeScope(jjtn002);
       jjtc002 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte002 instanceof RuntimeException) {
       {if (true) throw (RuntimeException)jjte002;}
     }
     if (jjte002 instanceof ParseException) {
       {if (true) throw (ParseException)jjte002;}
     }
     {if (true) throw (Error)jjte002;}
      } finally {
     if (jjtc002) {
       jjtree.closeNodeScope(jjtn002, true);
     }
      }
    }
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case FUNCTION:
        ;
        break;
      default:
        jj_la1[1] = jj_gen;
        break label_2;
      }
     SimpleNode jjtn003 = new SimpleNode(JJTFUNC);
     boolean jjtc003 = true;
     jjtree.openNodeScope(jjtn003);
      try {
        Function();
      } catch (Throwable jjte003) {
     if (jjtc003) {
       jjtree.clearNodeScope(jjtn003);
       jjtc003 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte003 instanceof RuntimeException) {
       {if (true) throw (RuntimeException)jjte003;}
     }
     if (jjte003 instanceof ParseException) {
       {if (true) throw (ParseException)jjte003;}
     }
     {if (true) throw (Error)jjte003;}
      } finally {
     if (jjtc003) {
       jjtree.closeNodeScope(jjtn003, true);
     }
      }
    }
    jj_consume_token(RCHAVETA);

  }

// A declaration can only be an INT or INT[]
  static final public void Declaration() throws ParseException {
                            Token t0; Token t1; Token t2;
    t0 = jj_consume_token(ID);
            SimpleNode jjtn001 = new SimpleNode(JJTDECLID);
            boolean jjtc001 = true;
            jjtree.openNodeScope(jjtn001);
    try {
            jjtree.closeNodeScope(jjtn001, true);
            jjtc001 = false;
           jjtn001.val = t0.image;
    } finally {
            if (jjtc001) {
              jjtree.closeNodeScope(jjtn001, true);
            }
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 31:
      jj_consume_token(31);
      jj_consume_token(32);
      break;
    default:
      jj_la1[2] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ASSIGN:
      jj_consume_token(ASSIGN);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 31:
        jj_consume_token(31);
                    SimpleNode jjtn002 = new SimpleNode(JJTARRAYSIZE);
                    boolean jjtc002 = true;
                    jjtree.openNodeScope(jjtn002);
        try {
          ArraySize();
        } catch (Throwable jjte002) {
                    if (jjtc002) {
                      jjtree.clearNodeScope(jjtn002);
                      jjtc002 = false;
                    } else {
                      jjtree.popNode();
                    }
                    if (jjte002 instanceof RuntimeException) {
                      {if (true) throw (RuntimeException)jjte002;}
                    }
                    if (jjte002 instanceof ParseException) {
                      {if (true) throw (ParseException)jjte002;}
                    }
                    {if (true) throw (Error)jjte002;}
        } finally {
                    if (jjtc002) {
                      jjtree.closeNodeScope(jjtn002, true);
                    }
        }
        jj_consume_token(32);
        break;
      case ADDSUB_OP:
      case INTEGER:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ADDSUB_OP:
          t1 = jj_consume_token(ADDSUB_OP);
                                  SimpleNode jjtn003 = new SimpleNode(JJTADDSUBOP);
                                  boolean jjtc003 = true;
                                  jjtree.openNodeScope(jjtn003);
          try {
                                  jjtree.closeNodeScope(jjtn003, true);
                                  jjtc003 = false;
                                 jjtn003.val = t1.image;
                                /*HashMap temp = new HashMap(); temp.put(t1.image, new STC("AddSubOP", t1.image));*/
          } finally {
                                  if (jjtc003) {
                                    jjtree.closeNodeScope(jjtn003, true);
                                  }
          }
          break;
        default:
          jj_la1[3] = jj_gen;
          ;
        }
        t2 = jj_consume_token(INTEGER);
                               SimpleNode jjtn004 = new SimpleNode(JJTINICVAR);
                               boolean jjtc004 = true;
                               jjtree.openNodeScope(jjtn004);
        try {
                               jjtree.closeNodeScope(jjtn004, true);
                               jjtc004 = false;
                              jjtn004.val = t2.image; HashMap temp = new HashMap();
                                /*temp.put(t2.image, new STC("INTEGER", t2.image));*/
        } finally {
                               if (jjtc004) {
                                 jjtree.closeNodeScope(jjtn004, true);
                               }
        }
        break;
      default:
        jj_la1[4] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      jj_la1[5] = jj_gen;
      ;
    }
    jj_consume_token(PVIRG);
  }

// function(VarList) {} || function=nome(VarList) {} || function[]=nome(VarList)
  static final public void Function() throws ParseException {
                         Token t0; Token t1; Token t2;
    jj_consume_token(FUNCTION);
    t0 = jj_consume_token(ID);
                         SimpleNode jjtn001 = new SimpleNode(JJTFUNCID);
                         boolean jjtc001 = true;
                         jjtree.openNodeScope(jjtn001);
    try {
                         jjtree.closeNodeScope(jjtn001, true);
                         jjtc001 = false;
                        jjtn001.val = t0.image;
    } finally {
                         if (jjtc001) {
                           jjtree.closeNodeScope(jjtn001, true);
                         }
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ASSIGN:
    case 31:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 31:
        jj_consume_token(31);
        jj_consume_token(32);
        break;
      default:
        jj_la1[6] = jj_gen;
        ;
      }
      jj_consume_token(ASSIGN);
      t2 = jj_consume_token(ID);
                        SimpleNode jjtn002 = new SimpleNode(JJTASSIGNID);
                        boolean jjtc002 = true;
                        jjtree.openNodeScope(jjtn002);
      try {
                        jjtree.closeNodeScope(jjtn002, true);
                        jjtc002 = false;
                       jjtn002.val = t2.image;
      } finally {
                        if (jjtc002) {
                          jjtree.closeNodeScope(jjtn002, true);
                        }
      }
      jj_consume_token(LPAR);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ID:
              SimpleNode jjtn003 = new SimpleNode(JJTARGS);
              boolean jjtc003 = true;
              jjtree.openNodeScope(jjtn003);
        try {
          Varlist();
        } catch (Throwable jjte003) {
              if (jjtc003) {
                jjtree.clearNodeScope(jjtn003);
                jjtc003 = false;
              } else {
                jjtree.popNode();
              }
              if (jjte003 instanceof RuntimeException) {
                {if (true) throw (RuntimeException)jjte003;}
              }
              if (jjte003 instanceof ParseException) {
                {if (true) throw (ParseException)jjte003;}
              }
              {if (true) throw (Error)jjte003;}
        } finally {
              if (jjtc003) {
                jjtree.closeNodeScope(jjtn003, true);
              }
        }
        break;
      default:
        jj_la1[7] = jj_gen;
        ;
      }
      jj_consume_token(RPAR);
      break;
    case LPAR:
      jj_consume_token(LPAR);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ID:
                SimpleNode jjtn004 = new SimpleNode(JJTARGS);
                boolean jjtc004 = true;
                jjtree.openNodeScope(jjtn004);
        try {
          Varlist();
        } catch (Throwable jjte004) {
                if (jjtc004) {
                  jjtree.clearNodeScope(jjtn004);
                  jjtc004 = false;
                } else {
                  jjtree.popNode();
                }
                if (jjte004 instanceof RuntimeException) {
                  {if (true) throw (RuntimeException)jjte004;}
                }
                if (jjte004 instanceof ParseException) {
                  {if (true) throw (ParseException)jjte004;}
                }
                {if (true) throw (Error)jjte004;}
        } finally {
                if (jjtc004) {
                  jjtree.closeNodeScope(jjtn004, true);
                }
        }
        break;
      default:
        jj_la1[8] = jj_gen;
        ;
      }
      jj_consume_token(RPAR);
      break;
    default:
      jj_la1[9] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(LCHAVETA);
               SimpleNode jjtn005 = new SimpleNode(JJTFUNCBODY);
               boolean jjtc005 = true;
               jjtree.openNodeScope(jjtn005);
    try {
      Stmtlst();
    } catch (Throwable jjte005) {
               if (jjtc005) {
                 jjtree.clearNodeScope(jjtn005);
                 jjtc005 = false;
               } else {
                 jjtree.popNode();
               }
               if (jjte005 instanceof RuntimeException) {
                 {if (true) throw (RuntimeException)jjte005;}
               }
               if (jjte005 instanceof ParseException) {
                 {if (true) throw (ParseException)jjte005;}
               }
               {if (true) throw (Error)jjte005;}
    } finally {
               if (jjtc005) {
                 jjtree.closeNodeScope(jjtn005, true);
               }
    }
    jj_consume_token(RCHAVETA);
  }

// melhorar identificacao de array
  static final public void Varlist() throws ParseException {
                        Token t0; Token t1;
    t0 = jj_consume_token(ID);
              SimpleNode jjtn001 = new SimpleNode(JJTVARLISTID);
              boolean jjtc001 = true;
              jjtree.openNodeScope(jjtn001);
    try {
              jjtree.closeNodeScope(jjtn001, true);
              jjtc001 = false;
             jjtn001.val=t0.image;
    } finally {
              if (jjtc001) {
                jjtree.closeNodeScope(jjtn001, true);
              }
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 31:
      jj_consume_token(31);
                                                       SimpleNode jjtn002 = new SimpleNode(JJTISARRAY);
                                                       boolean jjtc002 = true;
                                                       jjtree.openNodeScope(jjtn002);
      try {
        jj_consume_token(32);
      } finally {
                                                       if (jjtc002) {
                                                         jjtree.closeNodeScope(jjtn002, true);
                                                       }
      }
      break;
    default:
      jj_la1[10] = jj_gen;
      ;
    }
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case VIRG:
        ;
        break;
      default:
        jj_la1[11] = jj_gen;
        break label_3;
      }
      jj_consume_token(VIRG);
      t1 = jj_consume_token(ID);
                                                                                         SimpleNode jjtn003 = new SimpleNode(JJTVARLISTID);
                                                                                         boolean jjtc003 = true;
                                                                                         jjtree.openNodeScope(jjtn003);
      try {
                                                                                         jjtree.closeNodeScope(jjtn003, true);
                                                                                         jjtc003 = false;
                                                                                        jjtn003.val=t1.image;
      } finally {
                                                                                         if (jjtc003) {
                                                                                           jjtree.closeNodeScope(jjtn003, true);
                                                                                         }
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 31:
        jj_consume_token(31);
                                                                                                                                  SimpleNode jjtn004 = new SimpleNode(JJTISARRAY);
                                                                                                                                  boolean jjtc004 = true;
                                                                                                                                  jjtree.openNodeScope(jjtn004);
        try {
          jj_consume_token(32);
        } finally {
                                                                                                                                  if (jjtc004) {
                                                                                                                                    jjtree.closeNodeScope(jjtn004, true);
                                                                                                                                  }
        }
        break;
      default:
        jj_la1[12] = jj_gen;
        ;
      }
    }
  }

  static final public void ArrayElement() throws ParseException {
                             Token t0;
    t0 = jj_consume_token(ID);
             SimpleNode jjtn001 = new SimpleNode(JJTARRAYID);
             boolean jjtc001 = true;
             jjtree.openNodeScope(jjtn001);
    try {
             jjtree.closeNodeScope(jjtn001, true);
             jjtc001 = false;
            jjtn001.val = t0.image;
    } finally {
             if (jjtc001) {
               jjtree.closeNodeScope(jjtn001, true);
             }
    }
    jj_consume_token(31);
    jj_consume_token(32);
  }

  static final public void ScalarElement() throws ParseException {
                        /*@bgen(jjtree) ScalarElement */
                        SimpleNode jjtn000 = new SimpleNode(JJTSCALARELEMENT);
                        boolean jjtc000 = true;
                        jjtree.openNodeScope(jjtn000);Token t0;
    try {
      t0 = jj_consume_token(ID);
            SimpleNode jjtn001 = new SimpleNode(JJTSCALARID);
            boolean jjtc001 = true;
            jjtree.openNodeScope(jjtn001);
      try {
            jjtree.closeNodeScope(jjtn001, true);
            jjtc001 = false;
           jjtn001.val=t0.image;
      } finally {
            if (jjtc001) {
              jjtree.closeNodeScope(jjtn001, true);
            }
      }
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void Stmtlst() throws ParseException {
                  /*@bgen(jjtree) Stmtlst */
  SimpleNode jjtn000 = new SimpleNode(JJTSTMTLST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      label_4:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case WHILE:
        case IF:
        case ID:
          ;
          break;
        default:
          jj_la1[13] = jj_gen;
          break label_4;
        }
        Stmt();
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void Stmt() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case WHILE:
      While();
      break;
    case IF:
      If();
      break;
    case ID:
      if (jj_2_1(3)) {
        Assign();
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ID:
          Call();
          jj_consume_token(PVIRG);
          break;
        default:
          jj_la1[14] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
      break;
    default:
      jj_la1[15] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void Assign() throws ParseException {
                 /*@bgen(jjtree) Assign */
  SimpleNode jjtn000 = new SimpleNode(JJTASSIGN);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      Lhs();
      jj_consume_token(ASSIGN);
      Rhs();
      jj_consume_token(PVIRG);
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void Lhs() throws ParseException {
              /*@bgen(jjtree) Lhs */
              SimpleNode jjtn000 = new SimpleNode(JJTLHS);
              boolean jjtc000 = true;
              jjtree.openNodeScope(jjtn000);Token t0; Token tSize;
    try {
      //ArrayAccess() | ScalarAccess()
       t0 = jj_consume_token(ID);
          jjtn000.val = t0.image;
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 31:
        jj_consume_token(31);
        Index();
        jj_consume_token(32);
        break;
      default:
        jj_la1[17] = jj_gen;
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 33:
          jj_consume_token(33);
          tSize = jj_consume_token(SIZE);
                                                                              jjtn000.val=tSize.image;
          break;
        default:
          jj_la1[16] = jj_gen;
          ;
        }
      }
    } catch (Throwable jjte000) {
   if (jjtc000) {
     jjtree.clearNodeScope(jjtn000);
     jjtc000 = false;
   } else {
     jjtree.popNode();
   }
   if (jjte000 instanceof RuntimeException) {
     {if (true) throw (RuntimeException)jjte000;}
   }
   if (jjte000 instanceof ParseException) {
     {if (true) throw (ParseException)jjte000;}
   }
   {if (true) throw (Error)jjte000;}
    } finally {
   if (jjtc000) {
     jjtree.closeNodeScope(jjtn000, true);
   }
    }
  }

  static final public void Rhs() throws ParseException {
              /*@bgen(jjtree) Rhs */
              SimpleNode jjtn000 = new SimpleNode(JJTRHS);
              boolean jjtc000 = true;
              jjtree.openNodeScope(jjtn000);Token tOp;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ADDSUB_OP:
      case INTEGER:
      case ID:
    SimpleNode jjtn001 = new SimpleNode(JJTTERM);
    boolean jjtc001 = true;
    jjtree.openNodeScope(jjtn001);
        try {
          Term();
        } catch (Throwable jjte001) {
    if (jjtc001) {
      jjtree.clearNodeScope(jjtn001);
      jjtc001 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte001 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte001;}
    }
    if (jjte001 instanceof ParseException) {
      {if (true) throw (ParseException)jjte001;}
    }
    {if (true) throw (Error)jjte001;}
        } finally {
    if (jjtc001) {
      jjtree.closeNodeScope(jjtn001, true);
    }
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ADDSUB_OP:
        case ARITH_OP:
        case BITWISE_OP:
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case ARITH_OP:
                    SimpleNode jjtn002 = new SimpleNode(JJTARITMOP);
                    boolean jjtc002 = true;
                    jjtree.openNodeScope(jjtn002);
            try {
              tOp = jj_consume_token(ARITH_OP);
            } finally {
                    if (jjtc002) {
                      jjtree.closeNodeScope(jjtn002, true);
                    }
            }
            break;
          case BITWISE_OP:
                                              SimpleNode jjtn003 = new SimpleNode(JJTBITOP);
                                              boolean jjtc003 = true;
                                              jjtree.openNodeScope(jjtn003);
            try {
              tOp = jj_consume_token(BITWISE_OP);
            } finally {
                                              if (jjtc003) {
                                                jjtree.closeNodeScope(jjtn003, true);
                                              }
            }
            break;
          case ADDSUB_OP:
                                                                        SimpleNode jjtn004 = new SimpleNode(JJTADDSUBOP);
                                                                        boolean jjtc004 = true;
                                                                        jjtree.openNodeScope(jjtn004);
            try {
              tOp = jj_consume_token(ADDSUB_OP);
            } finally {
                                                                        if (jjtc004) {
                                                                          jjtree.closeNodeScope(jjtn004, true);
                                                                        }
            }
            break;
          default:
            jj_la1[18] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
                                                                                                  jjtn000.val=tOp.image;
                                                                                                                            SimpleNode jjtn005 = new SimpleNode(JJTTERM2);
                                                                                                                            boolean jjtc005 = true;
                                                                                                                            jjtree.openNodeScope(jjtn005);
          try {
            Term();
          } catch (Throwable jjte005) {
                                                                                                                            if (jjtc005) {
                                                                                                                              jjtree.clearNodeScope(jjtn005);
                                                                                                                              jjtc005 = false;
                                                                                                                            } else {
                                                                                                                              jjtree.popNode();
                                                                                                                            }
                                                                                                                            if (jjte005 instanceof RuntimeException) {
                                                                                                                              {if (true) throw (RuntimeException)jjte005;}
                                                                                                                            }
                                                                                                                            if (jjte005 instanceof ParseException) {
                                                                                                                              {if (true) throw (ParseException)jjte005;}
                                                                                                                            }
                                                                                                                            {if (true) throw (Error)jjte005;}
          } finally {
                                                                                                                            if (jjtc005) {
                                                                                                                              jjtree.closeNodeScope(jjtn005, true);
                                                                                                                            }
          }
          break;
        default:
          jj_la1[19] = jj_gen;
          ;
        }
        break;
      case 31:
        jj_consume_token(31);
         SimpleNode jjtn006 = new SimpleNode(JJTARRSIZE);
         boolean jjtc006 = true;
         jjtree.openNodeScope(jjtn006);
        try {
          ArraySize();
        } catch (Throwable jjte006) {
         if (jjtc006) {
           jjtree.clearNodeScope(jjtn006);
           jjtc006 = false;
         } else {
           jjtree.popNode();
         }
         if (jjte006 instanceof RuntimeException) {
           {if (true) throw (RuntimeException)jjte006;}
         }
         if (jjte006 instanceof ParseException) {
           {if (true) throw (ParseException)jjte006;}
         }
         {if (true) throw (Error)jjte006;}
        } finally {
         if (jjtc006) {
           jjtree.closeNodeScope(jjtn006, true);
         }
        }
        jj_consume_token(32);
        break;
      default:
        jj_la1[20] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
   if (jjtc000) {
     jjtree.clearNodeScope(jjtn000);
     jjtc000 = false;
   } else {
     jjtree.popNode();
   }
   if (jjte000 instanceof RuntimeException) {
     {if (true) throw (RuntimeException)jjte000;}
   }
   if (jjte000 instanceof ParseException) {
     {if (true) throw (ParseException)jjte000;}
   }
   {if (true) throw (Error)jjte000;}
    } finally {
   if (jjtc000) {
     jjtree.closeNodeScope(jjtn000, true);
   }
    }
  }

  static final public void ArraySize() throws ParseException {
                          Token tSize;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ID:
   SimpleNode jjtn001 = new SimpleNode(JJTSCALAR);
   boolean jjtc001 = true;
   jjtree.openNodeScope(jjtn001);
      try {
        ScalarAccess();
      } catch (Throwable jjte001) {
   if (jjtc001) {
     jjtree.clearNodeScope(jjtn001);
     jjtc001 = false;
   } else {
     jjtree.popNode();
   }
   if (jjte001 instanceof RuntimeException) {
     {if (true) throw (RuntimeException)jjte001;}
   }
   if (jjte001 instanceof ParseException) {
     {if (true) throw (ParseException)jjte001;}
   }
   {if (true) throw (Error)jjte001;}
      } finally {
   if (jjtc001) {
     jjtree.closeNodeScope(jjtn001, true);
   }
      }
      break;
    case INTEGER:
      tSize = jj_consume_token(INTEGER);
                                            SimpleNode jjtn002 = new SimpleNode(JJTINTEGER);
                                            boolean jjtc002 = true;
                                            jjtree.openNodeScope(jjtn002);
      try {
                                            jjtree.closeNodeScope(jjtn002, true);
                                            jjtc002 = false;
                                           jjtn002.val=tSize.image;
      } finally {
                                            if (jjtc002) {
                                              jjtree.closeNodeScope(jjtn002, true);
                                            }
      }
      break;
    default:
      jj_la1[21] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void Term() throws ParseException {
                    Token tInt; Token t0; Token t1; Token tSize; Token tOp;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ADDSUB_OP:
      tOp = jj_consume_token(ADDSUB_OP);
                    SimpleNode jjtn001 = new SimpleNode(JJTADDSUBOP);
                    boolean jjtc001 = true;
                    jjtree.openNodeScope(jjtn001);
      try {
                    jjtree.closeNodeScope(jjtn001, true);
                    jjtc001 = false;
                   jjtn001.val = tOp.image;
      } finally {
                    if (jjtc001) {
                      jjtree.closeNodeScope(jjtn001, true);
                    }
      }
      break;
    default:
      jj_la1[22] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INTEGER:
      tInt = jj_consume_token(INTEGER);
                                                                           SimpleNode jjtn002 = new SimpleNode(JJTINTEGER);
                                                                           boolean jjtc002 = true;
                                                                           jjtree.openNodeScope(jjtn002);
      try {
                                                                           jjtree.closeNodeScope(jjtn002, true);
                                                                           jjtc002 = false;
                                                                          jjtn002.val=tInt.image;
      } finally {
                                                                           if (jjtc002) {
                                                                             jjtree.closeNodeScope(jjtn002, true);
                                                                           }
      }
      break;
    case ID:
      t0 = jj_consume_token(ID);
                                                                                                                           SimpleNode jjtn003 = new SimpleNode(JJTID);
                                                                                                                           boolean jjtc003 = true;
                                                                                                                           jjtree.openNodeScope(jjtn003);
      try {
                                                                                                                           jjtree.closeNodeScope(jjtn003, true);
                                                                                                                           jjtc003 = false;
                                                                                                                          jjtn003.val=t0.image;
      } finally {
                                                                                                                           if (jjtc003) {
                                                                                                                             jjtree.closeNodeScope(jjtn003, true);
                                                                                                                           }
      }
      if (jj_2_2(2)) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 33:
          jj_consume_token(33);
          t1 = jj_consume_token(ID);
                                                   SimpleNode jjtn004 = new SimpleNode(JJTID2);
                                                   boolean jjtc004 = true;
                                                   jjtree.openNodeScope(jjtn004);
          try {
                                                   jjtree.closeNodeScope(jjtn004, true);
                                                   jjtc004 = false;
                                                  jjtn004.val=t1.image;
          } finally {
                                                   if (jjtc004) {
                                                     jjtree.closeNodeScope(jjtn004, true);
                                                   }
          }
          break;
        default:
          jj_la1[23] = jj_gen;
          ;
        }
        jj_consume_token(LPAR);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case INTEGER:
        case ID:
        case STRING:
                                                                                             SimpleNode jjtn005 = new SimpleNode(JJTARGLIST);
                                                                                             boolean jjtc005 = true;
                                                                                             jjtree.openNodeScope(jjtn005);
          try {
            ArgumentList();
          } catch (Throwable jjte005) {
                                                                                             if (jjtc005) {
                                                                                               jjtree.clearNodeScope(jjtn005);
                                                                                               jjtc005 = false;
                                                                                             } else {
                                                                                               jjtree.popNode();
                                                                                             }
                                                                                             if (jjte005 instanceof RuntimeException) {
                                                                                               {if (true) throw (RuntimeException)jjte005;}
                                                                                             }
                                                                                             if (jjte005 instanceof ParseException) {
                                                                                               {if (true) throw (ParseException)jjte005;}
                                                                                             }
                                                                                             {if (true) throw (Error)jjte005;}
          } finally {
                                                                                             if (jjtc005) {
                                                                                               jjtree.closeNodeScope(jjtn005, true);
                                                                                             }
          }
          break;
        default:
          jj_la1[24] = jj_gen;
          ;
        }
        jj_consume_token(RPAR);
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 31:
          jj_consume_token(31);
          Index();
          jj_consume_token(32);
          break;
        default:
          jj_la1[26] = jj_gen;
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case 33:
            jj_consume_token(33);
            tSize = jj_consume_token(SIZE);
                                                                       SimpleNode jjtn006 = new SimpleNode(JJTSIZE);
                                                                       boolean jjtc006 = true;
                                                                       jjtree.openNodeScope(jjtn006);
            try {
                                                                       jjtree.closeNodeScope(jjtn006, true);
                                                                       jjtc006 = false;
                                                                      jjtn006.val=tSize.image;
            } finally {
                                                                       if (jjtc006) {
                                                                         jjtree.closeNodeScope(jjtn006, true);
                                                                       }
            }
            break;
          default:
            jj_la1[25] = jj_gen;
            ;
          }
        }
      }
      break;
    default:
      jj_la1[27] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void Exprtest() throws ParseException {
                   /*@bgen(jjtree) Exprtest */
                   SimpleNode jjtn000 = new SimpleNode(JJTEXPRTEST);
                   boolean jjtc000 = true;
                   jjtree.openNodeScope(jjtn000);Token tOp;
    try {
      jj_consume_token(LPAR);
      Lhs();
      tOp = jj_consume_token(RELA_OP);
                               jjtn000.val=tOp.image;
      Rhs();
      jj_consume_token(RPAR);
    } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       {if (true) throw (RuntimeException)jjte000;}
     }
     if (jjte000 instanceof ParseException) {
       {if (true) throw (ParseException)jjte000;}
     }
     {if (true) throw (Error)jjte000;}
    } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
    }
  }

  static final public void While() throws ParseException {
                /*@bgen(jjtree) While */
  SimpleNode jjtn000 = new SimpleNode(JJTWHILE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(WHILE);
      Exprtest();
      jj_consume_token(LCHAVETA);
      Stmtlst();
      jj_consume_token(RCHAVETA);
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void If() throws ParseException {
             /*@bgen(jjtree) If */
  SimpleNode jjtn000 = new SimpleNode(JJTIF);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(IF);
      Exprtest();
      jj_consume_token(LCHAVETA);
      Stmtlst();
      jj_consume_token(RCHAVETA);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ELSE:
        jj_consume_token(ELSE);
        jj_consume_token(LCHAVETA);
        Stmtlst();
        jj_consume_token(RCHAVETA);
        break;
      default:
        jj_la1[28] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void Call() throws ParseException {
                     Token t0; Token t1;
    t0 = jj_consume_token(ID);
                SimpleNode jjtn001 = new SimpleNode(JJTCALLID);
                boolean jjtc001 = true;
                jjtree.openNodeScope(jjtn001);
    try {
                jjtree.closeNodeScope(jjtn001, true);
                jjtc001 = false;
               jjtn001.val = t0.image;
    } finally {
                if (jjtc001) {
                  jjtree.closeNodeScope(jjtn001, true);
                }
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 33:
      jj_consume_token(33);
      t1 = jj_consume_token(ID);
                                                                   SimpleNode jjtn002 = new SimpleNode(JJTCALLID2);
                                                                   boolean jjtc002 = true;
                                                                   jjtree.openNodeScope(jjtn002);
      try {
                                                                   jjtree.closeNodeScope(jjtn002, true);
                                                                   jjtc002 = false;
                                                                  jjtn002.val = t1.image;
      } finally {
                                                                   if (jjtc002) {
                                                                     jjtree.closeNodeScope(jjtn002, true);
                                                                   }
      }
      break;
    default:
      jj_la1[29] = jj_gen;
      ;
    }
    jj_consume_token(LPAR);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INTEGER:
    case ID:
    case STRING:
                                                                                                                   SimpleNode jjtn003 = new SimpleNode(JJTARGLIST);
                                                                                                                   boolean jjtc003 = true;
                                                                                                                   jjtree.openNodeScope(jjtn003);
      try {
        ArgumentList();
      } catch (Throwable jjte003) {
                                                                                                                   if (jjtc003) {
                                                                                                                     jjtree.clearNodeScope(jjtn003);
                                                                                                                     jjtc003 = false;
                                                                                                                   } else {
                                                                                                                     jjtree.popNode();
                                                                                                                   }
                                                                                                                   if (jjte003 instanceof RuntimeException) {
                                                                                                                     {if (true) throw (RuntimeException)jjte003;}
                                                                                                                   }
                                                                                                                   if (jjte003 instanceof ParseException) {
                                                                                                                     {if (true) throw (ParseException)jjte003;}
                                                                                                                   }
                                                                                                                   {if (true) throw (Error)jjte003;}
      } finally {
                                                                                                                   if (jjtc003) {
                                                                                                                     jjtree.closeNodeScope(jjtn003, true);
                                                                                                                   }
      }
      break;
    default:
      jj_la1[30] = jj_gen;
      ;
    }
    jj_consume_token(RPAR);
  }

  static final public void ArgumentList() throws ParseException {
    Argument();
    label_5:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case VIRG:
        ;
        break;
      default:
        jj_la1[31] = jj_gen;
        break label_5;
      }
      jj_consume_token(VIRG);
      Argument();
    }
  }

  static final public void Argument() throws ParseException {
                   /*@bgen(jjtree) Argument */
                   SimpleNode jjtn000 = new SimpleNode(JJTARGUMENT);
                   boolean jjtc000 = true;
                   jjtree.openNodeScope(jjtn000);Token tArg;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ID:
      SimpleNode jjtn001 = new SimpleNode(JJTARGID);
      boolean jjtc001 = true;
      jjtree.openNodeScope(jjtn001);
        try {
          tArg = jj_consume_token(ID);
        } finally {
      if (jjtc001) {
        jjtree.closeNodeScope(jjtn001, true);
      }
        }
        break;
      case STRING:
                           SimpleNode jjtn002 = new SimpleNode(JJTSTRING);
                           boolean jjtc002 = true;
                           jjtree.openNodeScope(jjtn002);
        try {
          tArg = jj_consume_token(STRING);
        } finally {
                           if (jjtc002) {
                             jjtree.closeNodeScope(jjtn002, true);
                           }
        }
        break;
      case INTEGER:
                                                     SimpleNode jjtn003 = new SimpleNode(JJTINTEGER);
                                                     boolean jjtc003 = true;
                                                     jjtree.openNodeScope(jjtn003);
        try {
          tArg = jj_consume_token(INTEGER);
        } finally {
                                                     if (jjtc003) {
                                                       jjtree.closeNodeScope(jjtn003, true);
                                                     }
        }
        break;
      default:
        jj_la1[32] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
                                                                                jjtree.closeNodeScope(jjtn000, true);
                                                                                jjtc000 = false;
                                                                               jjtn000.val = tArg.image;
    } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
    }
  }

  static final public void ArrayAccess() throws ParseException {
                            Token t0;
    t0 = jj_consume_token(ID);
               SimpleNode jjtn001 = new SimpleNode(JJTARRAYID);
               boolean jjtc001 = true;
               jjtree.openNodeScope(jjtn001);
    try {
               jjtree.closeNodeScope(jjtn001, true);
               jjtc001 = false;
              jjtn001.val = t0.image;
    } finally {
               if (jjtc001) {
                 jjtree.closeNodeScope(jjtn001, true);
               }
    }
    jj_consume_token(31);
                                                        SimpleNode jjtn002 = new SimpleNode(JJTARRAYINDEX);
                                                        boolean jjtc002 = true;
                                                        jjtree.openNodeScope(jjtn002);
    try {
      Index();
    } catch (Throwable jjte002) {
                                                        if (jjtc002) {
                                                          jjtree.clearNodeScope(jjtn002);
                                                          jjtc002 = false;
                                                        } else {
                                                          jjtree.popNode();
                                                        }
                                                        if (jjte002 instanceof RuntimeException) {
                                                          {if (true) throw (RuntimeException)jjte002;}
                                                        }
                                                        if (jjte002 instanceof ParseException) {
                                                          {if (true) throw (ParseException)jjte002;}
                                                        }
                                                        {if (true) throw (Error)jjte002;}
    } finally {
                                                        if (jjtc002) {
                                                          jjtree.closeNodeScope(jjtn002, true);
                                                        }
    }
    jj_consume_token(32);
  }

  static final public void ScalarAccess() throws ParseException {
                             Token t0; Token tSize;
    t0 = jj_consume_token(ID);
            SimpleNode jjtn001 = new SimpleNode(JJTSCALARID);
            boolean jjtc001 = true;
            jjtree.openNodeScope(jjtn001);
    try {
            jjtree.closeNodeScope(jjtn001, true);
            jjtc001 = false;
           jjtn001.val = t0.image;
    } finally {
            if (jjtc001) {
              jjtree.closeNodeScope(jjtn001, true);
            }
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 33:
      jj_consume_token(33);
      tSize = jj_consume_token(SIZE);
                                                                    SimpleNode jjtn002 = new SimpleNode(JJTSCALARSIZE);
                                                                    boolean jjtc002 = true;
                                                                    jjtree.openNodeScope(jjtn002);
      try {
                                                                    jjtree.closeNodeScope(jjtn002, true);
                                                                    jjtc002 = false;
                                                                   jjtn002.val=tSize.image;
      } finally {
                                                                    if (jjtc002) {
                                                                      jjtree.closeNodeScope(jjtn002, true);
                                                                    }
      }
      break;
    default:
      jj_la1[33] = jj_gen;
      ;
    }
  }

  static final public void Index() throws ParseException {
                /*@bgen(jjtree) Index */
                SimpleNode jjtn000 = new SimpleNode(JJTINDEX);
                boolean jjtc000 = true;
                jjtree.openNodeScope(jjtn000);Token t0;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ID:
      SimpleNode jjtn001 = new SimpleNode(JJTINDEXID);
      boolean jjtc001 = true;
      jjtree.openNodeScope(jjtn001);
        try {
          t0 = jj_consume_token(ID);
        } finally {
      if (jjtc001) {
        jjtree.closeNodeScope(jjtn001, true);
      }
        }
        break;
      case INTEGER:
                         SimpleNode jjtn002 = new SimpleNode(JJTINTEGER);
                         boolean jjtc002 = true;
                         jjtree.openNodeScope(jjtn002);
        try {
          t0 = jj_consume_token(INTEGER);
        } finally {
                         if (jjtc002) {
                           jjtree.closeNodeScope(jjtn002, true);
                         }
        }
        break;
      default:
        jj_la1[34] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
                                                jjtree.closeNodeScope(jjtn000, true);
                                                jjtc000 = false;
                                               jjtn000.val = t0.image;
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  static private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  static private boolean jj_3R_15() {
    if (jj_scan_token(31)) return true;
    return false;
  }

  static private boolean jj_3R_16() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_20()) {
    jj_scanpos = xsp;
    if (jj_3R_21()) {
    jj_scanpos = xsp;
    if (jj_3R_22()) return true;
    }
    }
    return false;
  }

  static private boolean jj_3R_10() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_14()) {
    jj_scanpos = xsp;
    if (jj_3R_15()) return true;
    }
    return false;
  }

  static private boolean jj_3R_14() {
    if (jj_3R_19()) return true;
    return false;
  }

  static private boolean jj_3R_7() {
    if (jj_scan_token(33)) return true;
    if (jj_scan_token(ID)) return true;
    return false;
  }

  static private boolean jj_3R_11() {
    if (jj_3R_16()) return true;
    return false;
  }

  static private boolean jj_3R_9() {
    if (jj_scan_token(ID)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_12()) {
    jj_scanpos = xsp;
    if (jj_3R_13()) return true;
    }
    return false;
  }

  static private boolean jj_3R_24() {
    if (jj_scan_token(INTEGER)) return true;
    return false;
  }

  static private boolean jj_3_1() {
    if (jj_3R_6()) return true;
    return false;
  }

  static private boolean jj_3R_6() {
    if (jj_3R_9()) return true;
    if (jj_scan_token(ASSIGN)) return true;
    if (jj_3R_10()) return true;
    return false;
  }

  static private boolean jj_3_2() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_7()) jj_scanpos = xsp;
    if (jj_scan_token(LPAR)) return true;
    xsp = jj_scanpos;
    if (jj_3R_8()) jj_scanpos = xsp;
    if (jj_scan_token(RPAR)) return true;
    return false;
  }

  static private boolean jj_3R_12() {
    if (jj_scan_token(31)) return true;
    if (jj_3R_17()) return true;
    return false;
  }

  static private boolean jj_3R_27() {
    if (jj_scan_token(ID)) return true;
    return false;
  }

  static private boolean jj_3R_21() {
    if (jj_scan_token(STRING)) return true;
    return false;
  }

  static private boolean jj_3R_26() {
    if (jj_scan_token(INTEGER)) return true;
    return false;
  }

  static private boolean jj_3R_23() {
    if (jj_scan_token(ID)) return true;
    return false;
  }

  static private boolean jj_3R_17() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_23()) {
    jj_scanpos = xsp;
    if (jj_3R_24()) return true;
    }
    return false;
  }

  static private boolean jj_3R_25() {
    if (jj_scan_token(ADDSUB_OP)) return true;
    return false;
  }

  static private boolean jj_3R_19() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_25()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_26()) {
    jj_scanpos = xsp;
    if (jj_3R_27()) return true;
    }
    return false;
  }

  static private boolean jj_3R_8() {
    if (jj_3R_11()) return true;
    return false;
  }

  static private boolean jj_3R_18() {
    if (jj_scan_token(33)) return true;
    if (jj_scan_token(SIZE)) return true;
    return false;
  }

  static private boolean jj_3R_22() {
    if (jj_scan_token(INTEGER)) return true;
    return false;
  }

  static private boolean jj_3R_13() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_18()) jj_scanpos = xsp;
    return false;
  }

  static private boolean jj_3R_20() {
    if (jj_scan_token(ID)) return true;
    return false;
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public yal2jvmTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private Token jj_scanpos, jj_lastpos;
  static private int jj_la;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[35];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x8000000,0x800000,0x80000000,0x100,0x84000100,0x8000,0x80000000,0x8000000,0x8000000,0x80028000,0x80000000,0x80000,0x80000000,0x8003000,0x8000000,0x8003000,0x0,0x80000000,0x700,0x700,0x8c000100,0xc000000,0x100,0x0,0x4c000000,0x0,0x80000000,0xc000000,0x4000,0x0,0x4c000000,0x80000,0x4c000000,0x0,0xc000000,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x0,0x2,0x0,0x0,0x0,0x2,0x0,0x0,0x0,0x2,0x0,};
   }
  static final private JJCalls[] jj_2_rtns = new JJCalls[2];
  static private boolean jj_rescan = false;
  static private int jj_gc = 0;

  /** Constructor with InputStream. */
  public yal2jvm(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public yal2jvm(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new yal2jvmTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 35; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 35; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public yal2jvm(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new yal2jvmTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 35; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 35; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public yal2jvm(yal2jvmTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 35; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(yal2jvmTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 35; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  static private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  static final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  static private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;
  static private int[] jj_lasttokens = new int[100];
  static private int jj_endpos;

  static private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      jj_entries_loop: for (java.util.Iterator it = jj_expentries.iterator(); it.hasNext();) {
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              continue jj_entries_loop;
            }
          }
          jj_expentries.add(jj_expentry);
          break jj_entries_loop;
        }
      }
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  static public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[34];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 35; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 34; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

  static private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 2; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  static private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

  }
