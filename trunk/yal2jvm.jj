/*@bgen(jjtree) Generated By:JJTree: Do not edit this line. yal2jvm.jj */
/*@egen*//**
 * JavaCC template file created by SF JavaCC plugin 1.5.17+ wizard for JavaCC 1.5.0+
 */
options
{
  JDK_VERSION = "1.5";
  static = true;
  LOOKAHEAD = 1;
}

PARSER_BEGIN(yal2jvm)

// c\u00f3digo Java que invoca o parser
  public class yal2jvm/*@bgen(jjtree)*/implements yal2jvmTreeConstants/*@egen*/ {/*@bgen(jjtree)*/
  protected static JJTyal2jvmState jjtree = new JJTyal2jvmState();

/*@egen*/
     public static void main(String args[]) throws ParseException {
       // cria\u00e7\u00e3o do objecto utilizando o constructor com argumento para
       // ler do standard input (teclado)
       yal2jvm newParser = new yal2jvm(System.in);
      // newParser.Module();
           
      SimpleNode root = newParser.parserBegin(); //devolve refer\u00eancia para o n\u00f3 raiz da \u00e1rvore
    //  System.out.println("Valor da express\u00e3o: "+myCalc.eval(root));
      root.dump("");
     }
  }
PARSER_END(yal2jvm)

// s\u00edmbolos que n\u00e3o devem ser considerados na an\u00e1lise
<DEFAULT> SKIP : { 
  	 " "  
	| "\t"
	| "\n"
	| "\r"
	| <"//" (~["\n","\r"])* ("\n" | "\r" | "\r\n")>
	| < "*/" (~["*"])* "*" ("*" | ~["*","/"] (~["*"])* "*")* "/" >
}

// defini\u00e7\u00e3o dos tokens (s\u00edmbolos terminais)
<DEFAULT> TOKEN : {
	<RELA_OP: ">" | "<" | "<=" | ">=" | "==" | "!=">
	| <ADDSUB_OP: "+" | "-">
	| <ARITH_OP: "*" | "/" | "<<" | ">>" | ">>>">
	| <BITWISE_OP: "&" | "|" | "^">
	| <NOT_OP: "!">
	| <WHILE: "while">
	| <IF: "if">
	| <ELSE: "else">
	| <ASSIGN: "=">
	| <ASPA: "\"">
	| <LPAR: "(">
	| <RPAR: ")">
	| <VIRG: ",">
	| <PVIRG: ";">
	| <LCHAVETA: "{">
	| <RCHAVETA: "}">
	| <FUNCTION: "function">
	| <MODULE: "module">
	| <SIZE: "size">
	
}

// defini\u00e7\u00e3o da produ\u00e7\u00e3o
<DEFAULT> TOKEN : {
<INTEGER: (<DIGIT>)+>
	| <ID: <LETTER> (<LETTER> | <DIGIT>)*>
	| <#LETTER: ["$","A"-"Z","_","a"-"z"]>
	| <#DIGIT: ["0"-"9"]>
	| <STRING: "\"" (["a"-"z","A"-"Z","0"-"9",":"," ","="])+ "\"">
}





SimpleNode parserBegin() : {/*@bgen(jjtree) parserBegin */
  SimpleNode jjtn000 = new SimpleNode(JJTPARSERBEGIN);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) parserBegin */
    try {
/*@egen*/
    Module()/*@bgen(jjtree)*/
             {
               jjtree.closeNodeScope(jjtn000, true);
               jjtc000 = false;
             }
/*@egen*/ {return jjtn000;}/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}



void Module()       : {Token t0;}
{
  /* module and chavetas nao aparecem nao precisam de aparecer na arvore 
  - #void nao guarda nada;
  arvore: 3: MID Decl Func;
  falta os valores*/
  
  <MODULE> t0=<ID>/*@bgen(jjtree) MID */
                   {
                     SimpleNode jjtn001 = new SimpleNode(JJTMID);
                     boolean jjtc001 = true;
                     jjtree.openNodeScope(jjtn001);
                   }
                   try {
/*@egen*//*@bgen(jjtree)*/
                   {
                     jjtree.closeNodeScope(jjtn001, true);
                     jjtc001 = false;
                   }
/*@egen*/ {jjtn001.val = t0.image;}/*@bgen(jjtree)*/
                   } finally {
                     if (jjtc001) {
                       jjtree.closeNodeScope(jjtn001, true);
                     }
                   }
/*@egen*/     
  <LCHAVETA>
  (/*@bgen(jjtree) Decl */
   {
     SimpleNode jjtn002 = new SimpleNode(JJTDECL);
     boolean jjtc002 = true;
     jjtree.openNodeScope(jjtn002);
   }
   try {
/*@egen*/Declaration()/*@bgen(jjtree)*/
   } catch (Throwable jjte002) {
     if (jjtc002) {
       jjtree.clearNodeScope(jjtn002);
       jjtc002 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte002 instanceof RuntimeException) {
       throw (RuntimeException)jjte002;
     }
     if (jjte002 instanceof ParseException) {
       throw (ParseException)jjte002;
     }
     throw (Error)jjte002;
   } finally {
     if (jjtc002) {
       jjtree.closeNodeScope(jjtn002, true);
     }
   }
/*@egen*/      )* 
  (/*@bgen(jjtree) Func */
   {
     SimpleNode jjtn003 = new SimpleNode(JJTFUNC);
     boolean jjtc003 = true;
     jjtree.openNodeScope(jjtn003);
   }
   try {
/*@egen*/Function()/*@bgen(jjtree)*/
   } catch (Throwable jjte003) {
     if (jjtc003) {
       jjtree.clearNodeScope(jjtn003);
       jjtc003 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte003 instanceof RuntimeException) {
       throw (RuntimeException)jjte003;
     }
     if (jjte003 instanceof ParseException) {
       throw (ParseException)jjte003;
     }
     throw (Error)jjte003;
   } finally {
     if (jjtc003) {
       jjtree.closeNodeScope(jjtn003, true);
     }
   }
/*@egen*/      )*
  <RCHAVETA>
}


void Declaration()       : {Token t0;}
{
  t0=<ID>/*@bgen(jjtree) DeclID */
          {
            SimpleNode jjtn001 = new SimpleNode(JJTDECLID);
            boolean jjtc001 = true;
            jjtree.openNodeScope(jjtn001);
          }
          try {
/*@egen*//*@bgen(jjtree)*/
          {
            jjtree.closeNodeScope(jjtn001, true);
            jjtc001 = false;
          }
/*@egen*/ {jjtn001.val = t0.image;}/*@bgen(jjtree)*/
          } finally {
            if (jjtc001) {
              jjtree.closeNodeScope(jjtn001, true);
            }
          }
/*@egen*/         ["[" "]"] // (ArrayElement() | ScalarElement())
  (<ASSIGN> (("["/*@bgen(jjtree) ArraySize */
                  {
                    SimpleNode jjtn002 = new SimpleNode(JJTARRAYSIZE);
                    boolean jjtc002 = true;
                    jjtree.openNodeScope(jjtn002);
                  }
                  try {
/*@egen*/ ArraySize()/*@bgen(jjtree)*/
                  } catch (Throwable jjte002) {
                    if (jjtc002) {
                      jjtree.clearNodeScope(jjtn002);
                      jjtc002 = false;
                    } else {
                      jjtree.popNode();
                    }
                    if (jjte002 instanceof RuntimeException) {
                      throw (RuntimeException)jjte002;
                    }
                    if (jjte002 instanceof ParseException) {
                      throw (ParseException)jjte002;
                    }
                    throw (Error)jjte002;
                  } finally {
                    if (jjtc002) {
                      jjtree.closeNodeScope(jjtn002, true);
                    }
                  }
/*@egen*/            "]")
	      | (<ADDSUB_OP>)?/*@bgen(jjtree) InicVar */
                               {
                                 SimpleNode jjtn003 = new SimpleNode(JJTINICVAR);
                                 boolean jjtc003 = true;
                                 jjtree.openNodeScope(jjtn003);
                               }
                               try {
/*@egen*/ <INTEGER>/*@bgen(jjtree)*/
                               } finally {
                                 if (jjtc003) {
                                   jjtree.closeNodeScope(jjtn003, true);
                                 }
                               }
/*@egen*/         ))?  <PVIRG>
}

void Function()       : {Token t0; Token t1; Token t2;}
{
  /*
  ((<FUNCTION> ( <ID> ("[" "]") ArrayElement() | ScalarElement()) 
   <ASSIGN> <ID> <LPAR> func nome[] = nome2(args);
      (Varlist())? <RPAR>)
  |
  (<FUNCTION> <ID> <LPAR> (Varlist())? <RPAR>))
  
  <LCHAVETA> Stmtlst() <RCHAVETA>
  */
  
  
  /*THIS ONE! */
  (<FUNCTION> (t0=<ID>/*@bgen(jjtree) FuncID */
                       {
                         SimpleNode jjtn001 = new SimpleNode(JJTFUNCID);
                         boolean jjtc001 = true;
                         jjtree.openNodeScope(jjtn001);
                       }
                       try {
/*@egen*//*@bgen(jjtree)*/
                       {
                         jjtree.closeNodeScope(jjtn001, true);
                         jjtc001 = false;
                       }
/*@egen*/ {jjtn001.val = t0.image;}/*@bgen(jjtree)*/
                       } finally {
                         if (jjtc001) {
                           jjtree.closeNodeScope(jjtn001, true);
                         }
                       }
/*@egen*/        )
    (
    (( "[" "]")?
    <ASSIGN> (t2=<ID>/*@bgen(jjtree) AssignID */
                      {
                        SimpleNode jjtn002 = new SimpleNode(JJTASSIGNID);
                        boolean jjtc002 = true;
                        jjtree.openNodeScope(jjtn002);
                      }
                      try {
/*@egen*//*@bgen(jjtree)*/
                      {
                        jjtree.closeNodeScope(jjtn002, true);
                        jjtc002 = false;
                      }
/*@egen*/ {jjtn002.val = t2.image;}/*@bgen(jjtree)*/
                      } finally {
                        if (jjtc002) {
                          jjtree.closeNodeScope(jjtn002, true);
                        }
                      }
/*@egen*/          )
    <LPAR> (/*@bgen(jjtree) Args */
            {
              SimpleNode jjtn003 = new SimpleNode(JJTARGS);
              boolean jjtc003 = true;
              jjtree.openNodeScope(jjtn003);
            }
            try {
/*@egen*/Varlist()/*@bgen(jjtree)*/
            } catch (Throwable jjte003) {
              if (jjtc003) {
                jjtree.clearNodeScope(jjtn003);
                jjtc003 = false;
              } else {
                jjtree.popNode();
              }
              if (jjte003 instanceof RuntimeException) {
                throw (RuntimeException)jjte003;
              }
              if (jjte003 instanceof ParseException) {
                throw (ParseException)jjte003;
              }
              throw (Error)jjte003;
            } finally {
              if (jjtc003) {
                jjtree.closeNodeScope(jjtn003, true);
              }
            }
/*@egen*/      )? <RPAR>)
    |
    ( <LPAR> (/*@bgen(jjtree) Args */
              {
                SimpleNode jjtn004 = new SimpleNode(JJTARGS);
                boolean jjtc004 = true;
                jjtree.openNodeScope(jjtn004);
              }
              try {
/*@egen*/Varlist()/*@bgen(jjtree)*/
              } catch (Throwable jjte004) {
                if (jjtc004) {
                  jjtree.clearNodeScope(jjtn004);
                  jjtc004 = false;
                } else {
                  jjtree.popNode();
                }
                if (jjte004 instanceof RuntimeException) {
                  throw (RuntimeException)jjte004;
                }
                if (jjte004 instanceof ParseException) {
                  throw (ParseException)jjte004;
                }
                throw (Error)jjte004;
              } finally {
                if (jjtc004) {
                  jjtree.closeNodeScope(jjtn004, true);
                }
              }
/*@egen*/      )? <RPAR>))
  )
  
  <LCHAVETA>/*@bgen(jjtree) FuncBody */
             {
               SimpleNode jjtn005 = new SimpleNode(JJTFUNCBODY);
               boolean jjtc005 = true;
               jjtree.openNodeScope(jjtn005);
             }
             try {
/*@egen*/ Stmtlst()/*@bgen(jjtree)*/
             } catch (Throwable jjte005) {
               if (jjtc005) {
                 jjtree.clearNodeScope(jjtn005);
                 jjtc005 = false;
               } else {
                 jjtree.popNode();
               }
               if (jjte005 instanceof RuntimeException) {
                 throw (RuntimeException)jjte005;
               }
               if (jjte005 instanceof ParseException) {
                 throw (ParseException)jjte005;
               }
               throw (Error)jjte005;
             } finally {
               if (jjtc005) {
                 jjtree.closeNodeScope(jjtn005, true);
               }
             }
/*@egen*/           <RCHAVETA>
  
  
  
  /*
  (LOOKAHEAD(3) (<FUNCTION> ( <ID> ("[" "]") <ID> ("[" "]")?) 
   <ASSIGN> <ID> <LPAR> 
      (Varlist())? <RPAR>)
  |
  (<FUNCTION> <ID> <LPAR> (Varlist())? <RPAR>))
  
  <LCHAVETA> Stmtlst() <RCHAVETA>
  */
}
      
void Varlist()       : {Token t0; Token t1;}
{
    //(ArrayElement() | ScalarElement()) ( <VIRG> (ArrayElement() | ScalarElement() ) )*
    
    ((t0=<ID>/*@bgen(jjtree) VarListID */
              {
                SimpleNode jjtn001 = new SimpleNode(JJTVARLISTID);
                boolean jjtc001 = true;
                jjtree.openNodeScope(jjtn001);
              }
              try {
/*@egen*//*@bgen(jjtree)*/
              {
                jjtree.closeNodeScope(jjtn001, true);
                jjtc001 = false;
              }
/*@egen*/ {jjtn001.val=t0.image;}/*@bgen(jjtree)*/
              } finally {
                if (jjtc001) {
                  jjtree.closeNodeScope(jjtn001, true);
                }
              }
/*@egen*/           ) ("[" "]")?) ( <VIRG> (t1=<ID>/*@bgen(jjtree) VarListID2 */
                                                                                {
                                                                                  SimpleNode jjtn002 = new SimpleNode(JJTVARLISTID2);
                                                                                  boolean jjtc002 = true;
                                                                                  jjtree.openNodeScope(jjtn002);
                                                                                }
                                                                                try {
/*@egen*//*@bgen(jjtree)*/
                                                                                {
                                                                                  jjtree.closeNodeScope(jjtn002, true);
                                                                                  jjtc002 = false;
                                                                                }
/*@egen*/ {jjtn002.val=t1.image;}/*@bgen(jjtree)*/
                                                                                } finally {
                                                                                  if (jjtc002) {
                                                                                    jjtree.closeNodeScope(jjtn002, true);
                                                                                  }
                                                                                }
/*@egen*/            ) ("[" "]")? )*
}






void ArrayElement()       : {Token t0;}
{
  (t0=<ID>/*@bgen(jjtree) ArrayID */
           {
             SimpleNode jjtn001 = new SimpleNode(JJTARRAYID);
             boolean jjtc001 = true;
             jjtree.openNodeScope(jjtn001);
           }
           try {
/*@egen*//*@bgen(jjtree)*/
           {
             jjtree.closeNodeScope(jjtn001, true);
             jjtc001 = false;
           }
/*@egen*/ {jjtn001.val = t0.image;}/*@bgen(jjtree)*/
           } finally {
             if (jjtc001) {
               jjtree.closeNodeScope(jjtn001, true);
             }
           }
/*@egen*/         ) "[" "]"
}

void ScalarElement() : {/*@bgen(jjtree) ScalarElement */
                        SimpleNode jjtn000 = new SimpleNode(JJTSCALARELEMENT);
                        boolean jjtc000 = true;
                        jjtree.openNodeScope(jjtn000);
/*@egen*/Token t0;}
{/*@bgen(jjtree) ScalarElement */
  try {
/*@egen*/
  t0=<ID>/*@bgen(jjtree) ScalarID */
          {
            SimpleNode jjtn001 = new SimpleNode(JJTSCALARID);
            boolean jjtc001 = true;
            jjtree.openNodeScope(jjtn001);
          }
          try {
/*@egen*//*@bgen(jjtree)*/
          {
            jjtree.closeNodeScope(jjtn001, true);
            jjtc001 = false;
          }
/*@egen*/ {jjtn001.val=t0.image;}/*@bgen(jjtree)*/
          } finally {
            if (jjtc001) {
              jjtree.closeNodeScope(jjtn001, true);
            }
          }
/*@egen*/          /*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void Stmtlst() : {/*@bgen(jjtree) Stmtlst */
  SimpleNode jjtn000 = new SimpleNode(JJTSTMTLST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Stmtlst */
  try {
/*@egen*/
  ( Stmt() )*/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void Stmt()       : {}
{
  //While() | If() | Assign() | Call() <PVIRG>
  While() | If() | (LOOKAHEAD(3) Assign() |  Call() <PVIRG> ) 
 
 /*
 {System.out.println("while in");} While() | {System.out.println("if in");} If() | 
 <ID> ( LOOKAHEAD(2) 
 ({System.out.println("assign in");} ( ("[" Index() "]") | ("." < SIZE >)? ) //:lhs()
    <ASSIGN> Rhs() <PVIRG>  
 ) //assign
 | 
  ({System.out.println("call in");} ("." < ID >)? < LPAR > (ArgumentList())? < RPAR >
  <PVIRG>)//call
 )*/
}

void Assign() : {/*@bgen(jjtree) Assign */
  SimpleNode jjtn000 = new SimpleNode(JJTASSIGN);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Assign */
  try {
/*@egen*/
  Lhs() <ASSIGN> Rhs() <PVIRG>/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/ 
}


void Lhs() : {/*@bgen(jjtree) Lhs */
              SimpleNode jjtn000 = new SimpleNode(JJTLHS);
              boolean jjtc000 = true;
              jjtree.openNodeScope(jjtn000);
/*@egen*/Token t0; Token tSize;}
{/*@bgen(jjtree) Lhs */
 try {
/*@egen*/
 //ArrayAccess() | ScalarAccess()
 t0=<ID> {jjtn000.val = t0.image;} ( ("[" Index() "]") | ("." tSize=< SIZE > {jjtn000.val=tSize.image;})? )/*@bgen(jjtree)*/
 } catch (Throwable jjte000) {
   if (jjtc000) {
     jjtree.clearNodeScope(jjtn000);
     jjtc000 = false;
   } else {
     jjtree.popNode();
   }
   if (jjte000 instanceof RuntimeException) {
     throw (RuntimeException)jjte000;
   }
   if (jjte000 instanceof ParseException) {
     throw (ParseException)jjte000;
   }
   throw (Error)jjte000;
 } finally {
   if (jjtc000) {
     jjtree.closeNodeScope(jjtn000, true);
   }
 }
/*@egen*/
}

void Rhs() : {/*@bgen(jjtree) Rhs */
              SimpleNode jjtn000 = new SimpleNode(JJTRHS);
              boolean jjtc000 = true;
              jjtree.openNodeScope(jjtn000);
/*@egen*/Token tOp;}
{/*@bgen(jjtree) Rhs */
 try {
/*@egen*/
 (/*@bgen(jjtree) Term */
  {
    SimpleNode jjtn001 = new SimpleNode(JJTTERM);
    boolean jjtc001 = true;
    jjtree.openNodeScope(jjtn001);
  }
  try {
/*@egen*/Term()/*@bgen(jjtree)*/
  } catch (Throwable jjte001) {
    if (jjtc001) {
      jjtree.clearNodeScope(jjtn001);
      jjtc001 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte001 instanceof RuntimeException) {
      throw (RuntimeException)jjte001;
    }
    if (jjte001 instanceof ParseException) {
      throw (ParseException)jjte001;
    }
    throw (Error)jjte001;
  } finally {
    if (jjtc001) {
      jjtree.closeNodeScope(jjtn001, true);
    }
  }
/*@egen*/       [(/*@bgen(jjtree) AritmOP */
                  {
                    SimpleNode jjtn002 = new SimpleNode(JJTARITMOP);
                    boolean jjtc002 = true;
                    jjtree.openNodeScope(jjtn002);
                  }
                  try {
/*@egen*/ tOp=<ARITH_OP>/*@bgen(jjtree)*/
                  } finally {
                    if (jjtc002) {
                      jjtree.closeNodeScope(jjtn002, true);
                    }
                  }
/*@egen*/          |/*@bgen(jjtree) BitOP */
                                            {
                                              SimpleNode jjtn003 = new SimpleNode(JJTBITOP);
                                              boolean jjtc003 = true;
                                              jjtree.openNodeScope(jjtn003);
                                            }
                                            try {
/*@egen*/ tOp=<BITWISE_OP>/*@bgen(jjtree)*/
                                            } finally {
                                              if (jjtc003) {
                                                jjtree.closeNodeScope(jjtn003, true);
                                              }
                                            }
/*@egen*/        |/*@bgen(jjtree) AddSubOP */
                                                                      {
                                                                        SimpleNode jjtn004 = new SimpleNode(JJTADDSUBOP);
                                                                        boolean jjtc004 = true;
                                                                        jjtree.openNodeScope(jjtn004);
                                                                      }
                                                                      try {
/*@egen*/ tOp=<ADDSUB_OP>/*@bgen(jjtree)*/
                                                                      } finally {
                                                                        if (jjtc004) {
                                                                          jjtree.closeNodeScope(jjtn004, true);
                                                                        }
                                                                      }
/*@egen*/          ) {jjtn000.val=tOp.image;}/*@bgen(jjtree) Term2 */
                                                                                                                          {
                                                                                                                            SimpleNode jjtn005 = new SimpleNode(JJTTERM2);
                                                                                                                            boolean jjtc005 = true;
                                                                                                                            jjtree.openNodeScope(jjtn005);
                                                                                                                          }
                                                                                                                          try {
/*@egen*/ Term()/*@bgen(jjtree)*/
                                                                                                                          } catch (Throwable jjte005) {
                                                                                                                            if (jjtc005) {
                                                                                                                              jjtree.clearNodeScope(jjtn005);
                                                                                                                              jjtc005 = false;
                                                                                                                            } else {
                                                                                                                              jjtree.popNode();
                                                                                                                            }
                                                                                                                            if (jjte005 instanceof RuntimeException) {
                                                                                                                              throw (RuntimeException)jjte005;
                                                                                                                            }
                                                                                                                            if (jjte005 instanceof ParseException) {
                                                                                                                              throw (ParseException)jjte005;
                                                                                                                            }
                                                                                                                            throw (Error)jjte005;
                                                                                                                          } finally {
                                                                                                                            if (jjtc005) {
                                                                                                                              jjtree.closeNodeScope(jjtn005, true);
                                                                                                                            }
                                                                                                                          }
/*@egen*/        ] )
 | "["/*@bgen(jjtree) ArrSize */
       {
         SimpleNode jjtn006 = new SimpleNode(JJTARRSIZE);
         boolean jjtc006 = true;
         jjtree.openNodeScope(jjtn006);
       }
       try {
/*@egen*/ ArraySize()/*@bgen(jjtree)*/
       } catch (Throwable jjte006) {
         if (jjtc006) {
           jjtree.clearNodeScope(jjtn006);
           jjtc006 = false;
         } else {
           jjtree.popNode();
         }
         if (jjte006 instanceof RuntimeException) {
           throw (RuntimeException)jjte006;
         }
         if (jjte006 instanceof ParseException) {
           throw (ParseException)jjte006;
         }
         throw (Error)jjte006;
       } finally {
         if (jjtc006) {
           jjtree.closeNodeScope(jjtn006, true);
         }
       }
/*@egen*/          "]"/*@bgen(jjtree)*/
 } catch (Throwable jjte000) {
   if (jjtc000) {
     jjtree.clearNodeScope(jjtn000);
     jjtc000 = false;
   } else {
     jjtree.popNode();
   }
   if (jjte000 instanceof RuntimeException) {
     throw (RuntimeException)jjte000;
   }
   if (jjte000 instanceof ParseException) {
     throw (ParseException)jjte000;
   }
   throw (Error)jjte000;
 } finally {
   if (jjtc000) {
     jjtree.closeNodeScope(jjtn000, true);
   }
 }
/*@egen*/
}


void ArraySize()       : {Token tSize;} 
{/*@bgen(jjtree) Scalar */
 {
   SimpleNode jjtn001 = new SimpleNode(JJTSCALAR);
   boolean jjtc001 = true;
   jjtree.openNodeScope(jjtn001);
 }
 try {
/*@egen*/
 ScalarAccess()/*@bgen(jjtree)*/
 } catch (Throwable jjte001) {
   if (jjtc001) {
     jjtree.clearNodeScope(jjtn001);
     jjtc001 = false;
   } else {
     jjtree.popNode();
   }
   if (jjte001 instanceof RuntimeException) {
     throw (RuntimeException)jjte001;
   }
   if (jjte001 instanceof ParseException) {
     throw (ParseException)jjte001;
   }
   throw (Error)jjte001;
 } finally {
   if (jjtc001) {
     jjtree.closeNodeScope(jjtn001, true);
   }
 }
/*@egen*/         | tSize=<INTEGER>/*@bgen(jjtree) INTEGER */
                                          {
                                            SimpleNode jjtn002 = new SimpleNode(JJTINTEGER);
                                            boolean jjtc002 = true;
                                            jjtree.openNodeScope(jjtn002);
                                          }
                                          try {
/*@egen*//*@bgen(jjtree)*/
                                          {
                                            jjtree.closeNodeScope(jjtn002, true);
                                            jjtc002 = false;
                                          }
/*@egen*/ {jjtn002.val=tSize.image;}/*@bgen(jjtree)*/
                                          } finally {
                                            if (jjtc002) {
                                              jjtree.closeNodeScope(jjtn002, true);
                                            }
                                          }
/*@egen*/         
}

void Term()      : {Token tInt; Token t0; Token t1; Token tSize; Token tOp;}
{
  //  ( <ADDSUB_OP> )? ( <INTEGER> | Call() | ArrayAccess() | ScalarAccess() )

 // ( <ADDSUB_OP> )? (<INTEGER> | LOOKAHEAD(3) Call() | LOOKAHEAD(2) ArrayAccess() | ScalarAccess())
 
 //( <ADDSUB_OP> )? (<INTEGER> | <ID> ("[" "]" | ("." < ID >)? < LPAR > (ArgumentList())? < RPAR >))
 
  //(<ADDSUB_OP> )? (<INTEGER> | LOOKAHEAD(3) Call() | ( <ID> ( ("[" Index() "]") | ("." <SIZE>)? )))

 

 (tOp=<ADDSUB_OP>/*@bgen(jjtree) AddSubOP */
                  {
                    SimpleNode jjtn001 = new SimpleNode(JJTADDSUBOP);
                    boolean jjtc001 = true;
                    jjtree.openNodeScope(jjtn001);
                  }
                  try {
/*@egen*//*@bgen(jjtree)*/
                  {
                    jjtree.closeNodeScope(jjtn001, true);
                    jjtc001 = false;
                  }
/*@egen*/ {jjtn001.val = tOp.image;}/*@bgen(jjtree)*/
                  } finally {
                    if (jjtc001) {
                      jjtree.closeNodeScope(jjtn001, true);
                    }
                  }
/*@egen*/          )? (tInt=<INTEGER>/*@bgen(jjtree) INTEGER */
                                                                         {
                                                                           SimpleNode jjtn002 = new SimpleNode(JJTINTEGER);
                                                                           boolean jjtc002 = true;
                                                                           jjtree.openNodeScope(jjtn002);
                                                                         }
                                                                         try {
/*@egen*//*@bgen(jjtree)*/
                                                                         {
                                                                           jjtree.closeNodeScope(jjtn002, true);
                                                                           jjtc002 = false;
                                                                         }
/*@egen*/ {jjtn002.val=tInt.image;}/*@bgen(jjtree)*/
                                                                         } finally {
                                                                           if (jjtc002) {
                                                                             jjtree.closeNodeScope(jjtn002, true);
                                                                           }
                                                                         }
/*@egen*/          | ( (t0=<ID>/*@bgen(jjtree) ID */
                                                                                                                         {
                                                                                                                           SimpleNode jjtn003 = new SimpleNode(JJTID);
                                                                                                                           boolean jjtc003 = true;
                                                                                                                           jjtree.openNodeScope(jjtn003);
                                                                                                                         }
                                                                                                                         try {
/*@egen*//*@bgen(jjtree)*/
                                                                                                                         {
                                                                                                                           jjtree.closeNodeScope(jjtn003, true);
                                                                                                                           jjtc003 = false;
                                                                                                                         }
/*@egen*/ {jjtn003.val=t0.image;}/*@bgen(jjtree)*/
                                                                                                                         } finally {
                                                                                                                           if (jjtc003) {
                                                                                                                             jjtree.closeNodeScope(jjtn003, true);
                                                                                                                           }
                                                                                                                         }
/*@egen*/    )
		 ( LOOKAHEAD(2) (("." (t1=< ID >/*@bgen(jjtree) ID2 */
                                                 {
                                                   SimpleNode jjtn004 = new SimpleNode(JJTID2);
                                                   boolean jjtc004 = true;
                                                   jjtree.openNodeScope(jjtn004);
                                                 }
                                                 try {
/*@egen*//*@bgen(jjtree)*/
                                                 {
                                                   jjtree.closeNodeScope(jjtn004, true);
                                                   jjtc004 = false;
                                                 }
/*@egen*/ {jjtn004.val=t1.image;}/*@bgen(jjtree)*/
                                                 } finally {
                                                   if (jjtc004) {
                                                     jjtree.closeNodeScope(jjtn004, true);
                                                   }
                                                 }
/*@egen*/     ))? < LPAR > (/*@bgen(jjtree) ArgList */
                                                                                           {
                                                                                             SimpleNode jjtn005 = new SimpleNode(JJTARGLIST);
                                                                                             boolean jjtc005 = true;
                                                                                             jjtree.openNodeScope(jjtn005);
                                                                                           }
                                                                                           try {
/*@egen*/ArgumentList()/*@bgen(jjtree)*/
                                                                                           } catch (Throwable jjte005) {
                                                                                             if (jjtc005) {
                                                                                               jjtree.clearNodeScope(jjtn005);
                                                                                               jjtc005 = false;
                                                                                             } else {
                                                                                               jjtree.popNode();
                                                                                             }
                                                                                             if (jjte005 instanceof RuntimeException) {
                                                                                               throw (RuntimeException)jjte005;
                                                                                             }
                                                                                             if (jjte005 instanceof ParseException) {
                                                                                               throw (ParseException)jjte005;
                                                                                             }
                                                                                             throw (Error)jjte005;
                                                                                           } finally {
                                                                                             if (jjtc005) {
                                                                                               jjtree.closeNodeScope(jjtn005, true);
                                                                                             }
                                                                                           }
/*@egen*/         )? < RPAR >)
		| ( ("[" Index() /*#Index*/ "]") | ("." tSize=<SIZE>/*@bgen(jjtree) Size */
                                                                     {
                                                                       SimpleNode jjtn006 = new SimpleNode(JJTSIZE);
                                                                       boolean jjtc006 = true;
                                                                       jjtree.openNodeScope(jjtn006);
                                                                     }
                                                                     try {
/*@egen*//*@bgen(jjtree)*/
                                                                     {
                                                                       jjtree.closeNodeScope(jjtn006, true);
                                                                       jjtc006 = false;
                                                                     }
/*@egen*/ {jjtn006.val=tSize.image;}/*@bgen(jjtree)*/
                                                                     } finally {
                                                                       if (jjtc006) {
                                                                         jjtree.closeNodeScope(jjtn006, true);
                                                                       }
                                                                     }
/*@egen*/      )? ))
		))
}

void Exprtest() : {/*@bgen(jjtree) Exprtest */
                   SimpleNode jjtn000 = new SimpleNode(JJTEXPRTEST);
                   boolean jjtc000 = true;
                   jjtree.openNodeScope(jjtn000);
/*@egen*/Token tOp;}
{/*@bgen(jjtree) Exprtest */
   try {
/*@egen*/
   <LPAR> Lhs() tOp=<RELA_OP> {jjtn000.val=tOp.image;} Rhs() <RPAR>/*@bgen(jjtree)*/
   } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       throw (RuntimeException)jjte000;
     }
     if (jjte000 instanceof ParseException) {
       throw (ParseException)jjte000;
     }
     throw (Error)jjte000;
   } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
   }
/*@egen*/
}

void While() : {/*@bgen(jjtree) While */
  SimpleNode jjtn000 = new SimpleNode(JJTWHILE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) While */
  try {
/*@egen*/
  <WHILE> Exprtest() <LCHAVETA> Stmtlst() <RCHAVETA>/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void If() : {/*@bgen(jjtree) If */
  SimpleNode jjtn000 = new SimpleNode(JJTIF);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) If */
  try {
/*@egen*/
  < IF > Exprtest() <LCHAVETA > Stmtlst() <RCHAVETA > (
  < ELSE > <LCHAVETA > Stmtlst() <RCHAVETA >)?/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}


void Call()       : {Token t0; Token t1;}
{
   (t0=< ID >/*@bgen(jjtree) CallID */
              {
                SimpleNode jjtn001 = new SimpleNode(JJTCALLID);
                boolean jjtc001 = true;
                jjtree.openNodeScope(jjtn001);
              }
              try {
/*@egen*//*@bgen(jjtree)*/
              {
                jjtree.closeNodeScope(jjtn001, true);
                jjtc001 = false;
              }
/*@egen*/ {jjtn001.val = t0.image;}/*@bgen(jjtree)*/
              } finally {
                if (jjtc001) {
                  jjtree.closeNodeScope(jjtn001, true);
                }
              }
/*@egen*/        ) ("." (t1=< ID >/*@bgen(jjtree) CallID2 */
                                                                 {
                                                                   SimpleNode jjtn002 = new SimpleNode(JJTCALLID2);
                                                                   boolean jjtc002 = true;
                                                                   jjtree.openNodeScope(jjtn002);
                                                                 }
                                                                 try {
/*@egen*//*@bgen(jjtree)*/
                                                                 {
                                                                   jjtree.closeNodeScope(jjtn002, true);
                                                                   jjtc002 = false;
                                                                 }
/*@egen*/ {jjtn002.val = t1.image;}/*@bgen(jjtree)*/
                                                                 } finally {
                                                                   if (jjtc002) {
                                                                     jjtree.closeNodeScope(jjtn002, true);
                                                                   }
                                                                 }
/*@egen*/         ))? < LPAR > (/*@bgen(jjtree) ArgList */
                                                                                                                 {
                                                                                                                   SimpleNode jjtn003 = new SimpleNode(JJTARGLIST);
                                                                                                                   boolean jjtc003 = true;
                                                                                                                   jjtree.openNodeScope(jjtn003);
                                                                                                                 }
                                                                                                                 try {
/*@egen*/ArgumentList()/*@bgen(jjtree)*/
                                                                                                                 } catch (Throwable jjte003) {
                                                                                                                   if (jjtc003) {
                                                                                                                     jjtree.clearNodeScope(jjtn003);
                                                                                                                     jjtc003 = false;
                                                                                                                   } else {
                                                                                                                     jjtree.popNode();
                                                                                                                   }
                                                                                                                   if (jjte003 instanceof RuntimeException) {
                                                                                                                     throw (RuntimeException)jjte003;
                                                                                                                   }
                                                                                                                   if (jjte003 instanceof ParseException) {
                                                                                                                     throw (ParseException)jjte003;
                                                                                                                   }
                                                                                                                   throw (Error)jjte003;
                                                                                                                 } finally {
                                                                                                                   if (jjtc003) {
                                                                                                                     jjtree.closeNodeScope(jjtn003, true);
                                                                                                                   }
                                                                                                                 }
/*@egen*/         )? < RPAR >
}

void ArgumentList()       : {}
{
  Argument() (< VIRG > Argument())*
}

void Argument() : {/*@bgen(jjtree) Argument */
                   SimpleNode jjtn000 = new SimpleNode(JJTARGUMENT);
                   boolean jjtc000 = true;
                   jjtree.openNodeScope(jjtn000);
/*@egen*/Token tArg;}
{/*@bgen(jjtree) Argument */
   try {
/*@egen*/
   (/*@bgen(jjtree) ArgID */
    {
      SimpleNode jjtn001 = new SimpleNode(JJTARGID);
      boolean jjtc001 = true;
      jjtree.openNodeScope(jjtn001);
    }
    try {
/*@egen*/tArg=< ID >/*@bgen(jjtree)*/
    } finally {
      if (jjtc001) {
        jjtree.closeNodeScope(jjtn001, true);
      }
    }
/*@egen*/        |/*@bgen(jjtree) STRING */
                         {
                           SimpleNode jjtn002 = new SimpleNode(JJTSTRING);
                           boolean jjtc002 = true;
                           jjtree.openNodeScope(jjtn002);
                         }
                         try {
/*@egen*/ tArg=< STRING >/*@bgen(jjtree)*/
                         } finally {
                           if (jjtc002) {
                             jjtree.closeNodeScope(jjtn002, true);
                           }
                         }
/*@egen*/         |/*@bgen(jjtree) INTEGER */
                                                   {
                                                     SimpleNode jjtn003 = new SimpleNode(JJTINTEGER);
                                                     boolean jjtc003 = true;
                                                     jjtree.openNodeScope(jjtn003);
                                                   }
                                                   try {
/*@egen*/ tArg=< INTEGER >/*@bgen(jjtree)*/
                                                   } finally {
                                                     if (jjtc003) {
                                                       jjtree.closeNodeScope(jjtn003, true);
                                                     }
                                                   }
/*@egen*/         )/*@bgen(jjtree)*/
                                                                              {
                                                                                jjtree.closeNodeScope(jjtn000, true);
                                                                                jjtc000 = false;
                                                                              }
/*@egen*/ {jjtn000.val = tArg.image;}/*@bgen(jjtree)*/
   } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
   }
/*@egen*/ // warning: see if this does not cause problems!!!
}

void ArrayAccess()       : {Token t0;}
{
  (t0=< ID >/*@bgen(jjtree) ArrayID */
             {
               SimpleNode jjtn001 = new SimpleNode(JJTARRAYID);
               boolean jjtc001 = true;
               jjtree.openNodeScope(jjtn001);
             }
             try {
/*@egen*//*@bgen(jjtree)*/
             {
               jjtree.closeNodeScope(jjtn001, true);
               jjtc001 = false;
             }
/*@egen*/ {jjtn001.val = t0.image;}/*@bgen(jjtree)*/
             } finally {
               if (jjtc001) {
                 jjtree.closeNodeScope(jjtn001, true);
               }
             }
/*@egen*/         ) "[" (/*@bgen(jjtree) ArrayIndex */
                                                      {
                                                        SimpleNode jjtn002 = new SimpleNode(JJTARRAYINDEX);
                                                        boolean jjtc002 = true;
                                                        jjtree.openNodeScope(jjtn002);
                                                      }
                                                      try {
/*@egen*/Index()/*@bgen(jjtree)*/
                                                      } catch (Throwable jjte002) {
                                                        if (jjtc002) {
                                                          jjtree.clearNodeScope(jjtn002);
                                                          jjtc002 = false;
                                                        } else {
                                                          jjtree.popNode();
                                                        }
                                                        if (jjte002 instanceof RuntimeException) {
                                                          throw (RuntimeException)jjte002;
                                                        }
                                                        if (jjte002 instanceof ParseException) {
                                                          throw (ParseException)jjte002;
                                                        }
                                                        throw (Error)jjte002;
                                                      } finally {
                                                        if (jjtc002) {
                                                          jjtree.closeNodeScope(jjtn002, true);
                                                        }
                                                      }
/*@egen*/            ) "]"
}

void ScalarAccess()       : {Token t0; Token tSize;}
{
  t0=<ID>/*@bgen(jjtree) ScalarID */
          {
            SimpleNode jjtn001 = new SimpleNode(JJTSCALARID);
            boolean jjtc001 = true;
            jjtree.openNodeScope(jjtn001);
          }
          try {
/*@egen*//*@bgen(jjtree)*/
          {
            jjtree.closeNodeScope(jjtn001, true);
            jjtc001 = false;
          }
/*@egen*/ {jjtn001.val = t0.image;}/*@bgen(jjtree)*/
          } finally {
            if (jjtc001) {
              jjtree.closeNodeScope(jjtn001, true);
            }
          }
/*@egen*/           ["." tSize=< SIZE >/*@bgen(jjtree) ScalarSize */
                                                                  {
                                                                    SimpleNode jjtn002 = new SimpleNode(JJTSCALARSIZE);
                                                                    boolean jjtc002 = true;
                                                                    jjtree.openNodeScope(jjtn002);
                                                                  }
                                                                  try {
/*@egen*//*@bgen(jjtree)*/
                                                                  {
                                                                    jjtree.closeNodeScope(jjtn002, true);
                                                                    jjtc002 = false;
                                                                  }
/*@egen*/ {jjtn002.val=tSize.image;}/*@bgen(jjtree)*/
                                                                  } finally {
                                                                    if (jjtc002) {
                                                                      jjtree.closeNodeScope(jjtn002, true);
                                                                    }
                                                                  }
/*@egen*/             ]    
}

void Index() : {/*@bgen(jjtree) Index */
                SimpleNode jjtn000 = new SimpleNode(JJTINDEX);
                boolean jjtc000 = true;
                jjtree.openNodeScope(jjtn000);
/*@egen*/Token t0;}
{/*@bgen(jjtree) Index */
  try {
/*@egen*/
  (/*@bgen(jjtree) IndexID */
    {
      SimpleNode jjtn001 = new SimpleNode(JJTINDEXID);
      boolean jjtc001 = true;
      jjtree.openNodeScope(jjtn001);
    }
    try {
/*@egen*/ t0=<ID>/*@bgen(jjtree)*/
    } finally {
      if (jjtc001) {
        jjtree.closeNodeScope(jjtn001, true);
      }
    }
/*@egen*/          |/*@bgen(jjtree) INTEGER */
                       {
                         SimpleNode jjtn002 = new SimpleNode(JJTINTEGER);
                         boolean jjtc002 = true;
                         jjtree.openNodeScope(jjtn002);
                       }
                       try {
/*@egen*/ t0=<INTEGER>/*@bgen(jjtree)*/
                       } finally {
                         if (jjtc002) {
                           jjtree.closeNodeScope(jjtn002, true);
                         }
                       }
/*@egen*/         )/*@bgen(jjtree)*/
                                              {
                                                jjtree.closeNodeScope(jjtn000, true);
                                                jjtc000 = false;
                                              }
/*@egen*/ {jjtn000.val = t0.image;}/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/ //check if no problem with this!!!
}
  



/*
void Parser() : {}
{
	Index() | ScalarAccess() | ArrayAccess()
}
*/

/*
void Aritm() : {Token t1, t2, op;}
{
  /*
  t1=<INTEGER> {
    System.out.println("Integer= "+t1.image);
  }
  
  (op=<OPERATOR> {
    System.out.println("Operator= "+op.image);
  }

  t2=<INTEGER> {
    System.out.println("Integer= "+t2.image);
  } )? <LF> // "(...)?" \u00e9 equivalente a "[...]"
}
*/

/* programa teste */
/*

module programa1 {
data=[100]; // vector of 100 integers
mx; // attribute mx
mn; // attribute mn
function det(d[]) { // N = size(d)
i=0;
M=d.size-1; // d.size equivales to d.length (Java)
while(i<M) { // version not optimized!
a=d[i]; i=i+1; b=d[i];
mx= library1.max(a,b);
mn= library1.min(a,b);
}
}
function main() {
det(data);
io.println("max: ",mx);
io.println("min: ",mn);
}
}

*/